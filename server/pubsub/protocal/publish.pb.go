// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: publish.proto

package dbms

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DBType int32

const (
	DBType_Null      DBType = 0
	DBType_Master    DBType = 1
	DBType_Slave     DBType = 2
	DBType_OBServer  DBType = 3
	DBType_OldMaster DBType = 4
)

// Enum value maps for DBType.
var (
	DBType_name = map[int32]string{
		0: "Null",
		1: "Master",
		2: "Slave",
		3: "OBServer",
		4: "OldMaster",
	}
	DBType_value = map[string]int32{
		"Null":      0,
		"Master":    1,
		"Slave":     2,
		"OBServer":  3,
		"OldMaster": 4,
	}
)

func (x DBType) Enum() *DBType {
	p := new(DBType)
	*p = x
	return p
}

func (x DBType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBType) Descriptor() protoreflect.EnumDescriptor {
	return file_publish_proto_enumTypes[0].Descriptor()
}

func (DBType) Type() protoreflect.EnumType {
	return &file_publish_proto_enumTypes[0]
}

func (x DBType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBType.Descriptor instead.
func (DBType) EnumDescriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{0}
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SentinelClusterId uint32 `protobuf:"varint,1,opt,name=sentinel_cluster_id,json=sentinelClusterId,proto3" json:"sentinel_cluster_id,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{0}
}

func (x *Topic) GetSentinelClusterId() uint32 {
	if x != nil {
		return x.SentinelClusterId
	}
	return 0
}

type PubsubMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddDbCluster *AddDBCluster `protobuf:"bytes,1,opt,name=add_db_cluster,json=addDbCluster,proto3" json:"add_db_cluster,omitempty"`
	DelDbCluster *DelDBCluster `protobuf:"bytes,2,opt,name=del_db_cluster,json=delDbCluster,proto3" json:"del_db_cluster,omitempty"`
}

func (x *PubsubMessage) Reset() {
	*x = PubsubMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubsubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsubMessage) ProtoMessage() {}

func (x *PubsubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsubMessage.ProtoReflect.Descriptor instead.
func (*PubsubMessage) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{1}
}

func (x *PubsubMessage) GetAddDbCluster() *AddDBCluster {
	if x != nil {
		return x.AddDbCluster
	}
	return nil
}

func (x *PubsubMessage) GetDelDbCluster() *DelDBCluster {
	if x != nil {
		return x.DelDbCluster
	}
	return nil
}

type AddDBCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbClusterConfig *DBClusterConfig `protobuf:"bytes,1,opt,name=db_cluster_config,json=dbClusterConfig,proto3" json:"db_cluster_config,omitempty"`
}

func (x *AddDBCluster) Reset() {
	*x = AddDBCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDBCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDBCluster) ProtoMessage() {}

func (x *AddDBCluster) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDBCluster.ProtoReflect.Descriptor instead.
func (*AddDBCluster) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{2}
}

func (x *AddDBCluster) GetDbClusterConfig() *DBClusterConfig {
	if x != nil {
		return x.DbClusterConfig
	}
	return nil
}

type DelDBCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DbClusterName string `protobuf:"bytes,1,opt,name=db_cluster_name,json=dbClusterName,proto3" json:"db_cluster_name,omitempty"`
}

func (x *DelDBCluster) Reset() {
	*x = DelDBCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelDBCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelDBCluster) ProtoMessage() {}

func (x *DelDBCluster) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelDBCluster.ProtoReflect.Descriptor instead.
func (*DelDBCluster) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{3}
}

func (x *DelDBCluster) GetDbClusterName() string {
	if x != nil {
		return x.DbClusterName
	}
	return ""
}

type PublishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   *Topic         `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Message *PubsubMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{4}
}

func (x *PublishRequest) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *PublishRequest) GetMessage() *PubsubMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type PublishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{5}
}

type GetConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port uint32 `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *GetConfigReq) Reset() {
	*x = GetConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigReq) ProtoMessage() {}

func (x *GetConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigReq.ProtoReflect.Descriptor instead.
func (*GetConfigReq) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{6}
}

func (x *GetConfigReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentEpoch      uint64             `protobuf:"varint,1,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	ConfigEpoch       uint64             `protobuf:"varint,2,opt,name=config_epoch,json=configEpoch,proto3" json:"config_epoch,omitempty"`
	SentinelConfigs   []*SentinelConfig  `protobuf:"bytes,3,rep,name=sentinel_configs,json=sentinelConfigs,proto3" json:"sentinel_configs,omitempty"`
	DbClusterConfigs  []*DBClusterConfig `protobuf:"bytes,4,rep,name=db_cluster_configs,json=dbClusterConfigs,proto3" json:"db_cluster_configs,omitempty"`
	SentinelClusterId uint32             `protobuf:"varint,5,opt,name=sentinel_cluster_id,json=sentinelClusterId,proto3" json:"sentinel_cluster_id,omitempty"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{7}
}

func (x *Config) GetCurrentEpoch() uint64 {
	if x != nil {
		return x.CurrentEpoch
	}
	return 0
}

func (x *Config) GetConfigEpoch() uint64 {
	if x != nil {
		return x.ConfigEpoch
	}
	return 0
}

func (x *Config) GetSentinelConfigs() []*SentinelConfig {
	if x != nil {
		return x.SentinelConfigs
	}
	return nil
}

func (x *Config) GetDbClusterConfigs() []*DBClusterConfig {
	if x != nil {
		return x.DbClusterConfigs
	}
	return nil
}

func (x *Config) GetSentinelClusterId() uint32 {
	if x != nil {
		return x.SentinelClusterId
	}
	return 0
}

type SentinelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Ip    string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port  uint64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *SentinelConfig) Reset() {
	*x = SentinelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SentinelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SentinelConfig) ProtoMessage() {}

func (x *SentinelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SentinelConfig.ProtoReflect.Descriptor instead.
func (*SentinelConfig) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{8}
}

func (x *SentinelConfig) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SentinelConfig) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SentinelConfig) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DBClusterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	User        string      `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Pw          string      `protobuf:"bytes,3,opt,name=pw,proto3" json:"pw,omitempty"`
	RlpcUser    string      `protobuf:"bytes,4,opt,name=rlpc_user,json=rlpcUser,proto3" json:"rlpc_user,omitempty"`
	RlpcPw      string      `protobuf:"bytes,5,opt,name=rlpc_pw,json=rlpcPw,proto3" json:"rlpc_pw,omitempty"`
	LeaderEpoch uint64      `protobuf:"varint,6,opt,name=leader_epoch,json=leaderEpoch,proto3" json:"leader_epoch,omitempty"`
	DbConfigs   []*DBConfig `protobuf:"bytes,7,rep,name=db_configs,json=dbConfigs,proto3" json:"db_configs,omitempty"`
}

func (x *DBClusterConfig) Reset() {
	*x = DBClusterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBClusterConfig) ProtoMessage() {}

func (x *DBClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBClusterConfig.ProtoReflect.Descriptor instead.
func (*DBClusterConfig) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{9}
}

func (x *DBClusterConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DBClusterConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DBClusterConfig) GetPw() string {
	if x != nil {
		return x.Pw
	}
	return ""
}

func (x *DBClusterConfig) GetRlpcUser() string {
	if x != nil {
		return x.RlpcUser
	}
	return ""
}

func (x *DBClusterConfig) GetRlpcPw() string {
	if x != nil {
		return x.RlpcPw
	}
	return ""
}

func (x *DBClusterConfig) GetLeaderEpoch() uint64 {
	if x != nil {
		return x.LeaderEpoch
	}
	return 0
}

func (x *DBClusterConfig) GetDbConfigs() []*DBConfig {
	if x != nil {
		return x.DbConfigs
	}
	return nil
}

type DBConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint64 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Type DBType `protobuf:"varint,3,opt,name=type,proto3,enum=DBType" json:"type,omitempty"`
}

func (x *DBConfig) Reset() {
	*x = DBConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DBConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DBConfig) ProtoMessage() {}

func (x *DBConfig) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DBConfig.ProtoReflect.Descriptor instead.
func (*DBConfig) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{10}
}

func (x *DBConfig) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DBConfig) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DBConfig) GetType() DBType {
	if x != nil {
		return x.Type
	}
	return DBType_Null
}

type GetConfigAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32  `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Config *Config `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetConfigAck) Reset() {
	*x = GetConfigAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetConfigAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConfigAck) ProtoMessage() {}

func (x *GetConfigAck) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConfigAck.ProtoReflect.Descriptor instead.
func (*GetConfigAck) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{11}
}

func (x *GetConfigAck) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *GetConfigAck) GetConfig() *Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type SwitchDBClusterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterName string      `protobuf:"bytes,1,opt,name=cluster_name,json=clusterName,proto3" json:"cluster_name,omitempty"`
	LeaderEpoch uint32      `protobuf:"varint,2,opt,name=leader_epoch,json=leaderEpoch,proto3" json:"leader_epoch,omitempty"`
	Dbs         []*DBConfig `protobuf:"bytes,3,rep,name=dbs,proto3" json:"dbs,omitempty"`
}

func (x *SwitchDBClusterReq) Reset() {
	*x = SwitchDBClusterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchDBClusterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDBClusterReq) ProtoMessage() {}

func (x *SwitchDBClusterReq) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDBClusterReq.ProtoReflect.Descriptor instead.
func (*SwitchDBClusterReq) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{12}
}

func (x *SwitchDBClusterReq) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *SwitchDBClusterReq) GetLeaderEpoch() uint32 {
	if x != nil {
		return x.LeaderEpoch
	}
	return 0
}

func (x *SwitchDBClusterReq) GetDbs() []*DBConfig {
	if x != nil {
		return x.Dbs
	}
	return nil
}

type SwitchDBClusterAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SwitchDBClusterAck) Reset() {
	*x = SwitchDBClusterAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchDBClusterAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDBClusterAck) ProtoMessage() {}

func (x *SwitchDBClusterAck) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDBClusterAck.ProtoReflect.Descriptor instead.
func (*SwitchDBClusterAck) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{13}
}

func (x *SwitchDBClusterAck) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type SyncSentinelConfigReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RunId        string `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Ip           string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port         uint64 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	CurrentEpoch uint64 `protobuf:"varint,4,opt,name=current_epoch,json=currentEpoch,proto3" json:"current_epoch,omitempty"`
	ConfigEpoch  uint64 `protobuf:"varint,5,opt,name=config_epoch,json=configEpoch,proto3" json:"config_epoch,omitempty"`
}

func (x *SyncSentinelConfigReq) Reset() {
	*x = SyncSentinelConfigReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSentinelConfigReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSentinelConfigReq) ProtoMessage() {}

func (x *SyncSentinelConfigReq) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSentinelConfigReq.ProtoReflect.Descriptor instead.
func (*SyncSentinelConfigReq) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{14}
}

func (x *SyncSentinelConfigReq) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SyncSentinelConfigReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SyncSentinelConfigReq) GetPort() uint64 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SyncSentinelConfigReq) GetCurrentEpoch() uint64 {
	if x != nil {
		return x.CurrentEpoch
	}
	return 0
}

func (x *SyncSentinelConfigReq) GetConfigEpoch() uint64 {
	if x != nil {
		return x.ConfigEpoch
	}
	return 0
}

type SyncSentinelConfigAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result uint32 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *SyncSentinelConfigAck) Reset() {
	*x = SyncSentinelConfigAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyncSentinelConfigAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncSentinelConfigAck) ProtoMessage() {}

func (x *SyncSentinelConfigAck) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncSentinelConfigAck.ProtoReflect.Descriptor instead.
func (*SyncSentinelConfigAck) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{15}
}

func (x *SyncSentinelConfigAck) GetResult() uint32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type HeartBeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *HeartBeatReq) Reset() {
	*x = HeartBeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatReq) ProtoMessage() {}

func (x *HeartBeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatReq.ProtoReflect.Descriptor instead.
func (*HeartBeatReq) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{16}
}

func (x *HeartBeatReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *HeartBeatReq) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type HeartBeatAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartBeatAck) Reset() {
	*x = HeartBeatAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_publish_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartBeatAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartBeatAck) ProtoMessage() {}

func (x *HeartBeatAck) ProtoReflect() protoreflect.Message {
	mi := &file_publish_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartBeatAck.ProtoReflect.Descriptor instead.
func (*HeartBeatAck) Descriptor() ([]byte, []int) {
	return file_publish_proto_rawDescGZIP(), []int{17}
}

var File_publish_proto protoreflect.FileDescriptor

var file_publish_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x37, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6e, 0x74,
	0x69, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x79, 0x0a, 0x0d, 0x50, 0x75, 0x62, 0x73,
	0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x0e, 0x61, 0x64, 0x64,
	0x5f, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x0c, 0x61, 0x64, 0x64, 0x44, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x5f, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x44, 0x65, 0x6c, 0x44, 0x42, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x44, 0x62, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x22, 0x4c, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x11, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0f, 0x64, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x36, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x62, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x62, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x58, 0x0a, 0x0e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x28, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x75, 0x62,
	0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xfc, 0x01, 0x0a, 0x06, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3a, 0x0a,
	0x10, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x3e, 0x0a, 0x12, 0x64, 0x62, 0x5f,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x64, 0x62, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x0e, 0x53, 0x65, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x72,
	0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x0f, 0x44, 0x42, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x70, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6c, 0x70, 0x63, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6c, 0x70, 0x63, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x72, 0x6c, 0x70, 0x63, 0x5f, 0x70, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x6c, 0x70, 0x63, 0x50, 0x77, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x28, 0x0a, 0x0a, 0x64,
	0x62, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x64, 0x62, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0x4b, 0x0a, 0x08, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x07, 0x2e, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x47, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41,
	0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x77, 0x0a, 0x12, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65,
	0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x03, 0x64, 0x62, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x44, 0x42, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x03, 0x64, 0x62, 0x73, 0x22, 0x2c, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x42,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x9a, 0x01, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x6e, 0x74, 0x69,
	0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x75, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x22,
	0x2f, 0x0a, 0x15, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x32, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x41, 0x63, 0x6b, 0x2a, 0x46, 0x0a, 0x06, 0x44, 0x42, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x76, 0x65, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a,
	0x09, 0x4f, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x10, 0x04, 0x32, 0xb4, 0x02, 0x0a,
	0x04, 0x44, 0x42, 0x4d, 0x53, 0x12, 0x2c, 0x0a, 0x07, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x12, 0x0f, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x10, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x06, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x1a, 0x0e, 0x2e, 0x50, 0x75, 0x62, 0x73, 0x75,
	0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x30, 0x01, 0x12, 0x29, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x41, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x0f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x42, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x63, 0x6b, 0x12, 0x44, 0x0a, 0x12, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6c, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x41, 0x63, 0x6b, 0x12, 0x29, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x0d, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74,
	0x41, 0x63, 0x6b, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x64, 0x62, 0x6d, 0x73, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_publish_proto_rawDescOnce sync.Once
	file_publish_proto_rawDescData = file_publish_proto_rawDesc
)

func file_publish_proto_rawDescGZIP() []byte {
	file_publish_proto_rawDescOnce.Do(func() {
		file_publish_proto_rawDescData = protoimpl.X.CompressGZIP(file_publish_proto_rawDescData)
	})
	return file_publish_proto_rawDescData
}

var file_publish_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_publish_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_publish_proto_goTypes = []interface{}{
	(DBType)(0),                   // 0: DBType
	(*Topic)(nil),                 // 1: Topic
	(*PubsubMessage)(nil),         // 2: PubsubMessage
	(*AddDBCluster)(nil),          // 3: AddDBCluster
	(*DelDBCluster)(nil),          // 4: DelDBCluster
	(*PublishRequest)(nil),        // 5: PublishRequest
	(*PublishResponse)(nil),       // 6: PublishResponse
	(*GetConfigReq)(nil),          // 7: GetConfigReq
	(*Config)(nil),                // 8: Config
	(*SentinelConfig)(nil),        // 9: SentinelConfig
	(*DBClusterConfig)(nil),       // 10: DBClusterConfig
	(*DBConfig)(nil),              // 11: DBConfig
	(*GetConfigAck)(nil),          // 12: GetConfigAck
	(*SwitchDBClusterReq)(nil),    // 13: SwitchDBClusterReq
	(*SwitchDBClusterAck)(nil),    // 14: SwitchDBClusterAck
	(*SyncSentinelConfigReq)(nil), // 15: SyncSentinelConfigReq
	(*SyncSentinelConfigAck)(nil), // 16: SyncSentinelConfigAck
	(*HeartBeatReq)(nil),          // 17: HeartBeatReq
	(*HeartBeatAck)(nil),          // 18: HeartBeatAck
}
var file_publish_proto_depIdxs = []int32{
	3,  // 0: PubsubMessage.add_db_cluster:type_name -> AddDBCluster
	4,  // 1: PubsubMessage.del_db_cluster:type_name -> DelDBCluster
	10, // 2: AddDBCluster.db_cluster_config:type_name -> DBClusterConfig
	1,  // 3: PublishRequest.topic:type_name -> Topic
	2,  // 4: PublishRequest.message:type_name -> PubsubMessage
	9,  // 5: Config.sentinel_configs:type_name -> SentinelConfig
	10, // 6: Config.db_cluster_configs:type_name -> DBClusterConfig
	11, // 7: DBClusterConfig.db_configs:type_name -> DBConfig
	0,  // 8: DBConfig.type:type_name -> DBType
	8,  // 9: GetConfigAck.config:type_name -> Config
	11, // 10: SwitchDBClusterReq.dbs:type_name -> DBConfig
	5,  // 11: DBMS.Publish:input_type -> PublishRequest
	1,  // 12: DBMS.Subscribe:input_type -> Topic
	7,  // 13: DBMS.GetConfig:input_type -> GetConfigReq
	13, // 14: DBMS.SwitchDBCluster:input_type -> SwitchDBClusterReq
	15, // 15: DBMS.SyncSentinelConfig:input_type -> SyncSentinelConfigReq
	17, // 16: DBMS.HeartBeat:input_type -> HeartBeatReq
	6,  // 17: DBMS.Publish:output_type -> PublishResponse
	2,  // 18: DBMS.Subscribe:output_type -> PubsubMessage
	12, // 19: DBMS.GetConfig:output_type -> GetConfigAck
	14, // 20: DBMS.SwitchDBCluster:output_type -> SwitchDBClusterAck
	16, // 21: DBMS.SyncSentinelConfig:output_type -> SyncSentinelConfigAck
	18, // 22: DBMS.HeartBeat:output_type -> HeartBeatAck
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_publish_proto_init() }
func file_publish_proto_init() {
	if File_publish_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_publish_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubsubMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDBCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelDBCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SentinelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBClusterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DBConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetConfigAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchDBClusterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchDBClusterAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSentinelConfigReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyncSentinelConfigAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_publish_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartBeatAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_publish_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_publish_proto_goTypes,
		DependencyIndexes: file_publish_proto_depIdxs,
		EnumInfos:         file_publish_proto_enumTypes,
		MessageInfos:      file_publish_proto_msgTypes,
	}.Build()
	File_publish_proto = out.File
	file_publish_proto_rawDesc = nil
	file_publish_proto_goTypes = nil
	file_publish_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DBMSClient is the client API for DBMS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DBMSClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (DBMS_SubscribeClient, error)
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigAck, error)
	SwitchDBCluster(ctx context.Context, in *SwitchDBClusterReq, opts ...grpc.CallOption) (*SwitchDBClusterAck, error)
	SyncSentinelConfig(ctx context.Context, in *SyncSentinelConfigReq, opts ...grpc.CallOption) (*SyncSentinelConfigAck, error)
	HeartBeat(ctx context.Context, in *HeartBeatReq, opts ...grpc.CallOption) (*HeartBeatAck, error)
}

type dBMSClient struct {
	cc grpc.ClientConnInterface
}

func NewDBMSClient(cc grpc.ClientConnInterface) DBMSClient {
	return &dBMSClient{cc}
}

func (c *dBMSClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/DBMS/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) Subscribe(ctx context.Context, in *Topic, opts ...grpc.CallOption) (DBMS_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DBMS_serviceDesc.Streams[0], "/DBMS/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBMSSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DBMS_SubscribeClient interface {
	Recv() (*PubsubMessage, error)
	grpc.ClientStream
}

type dBMSSubscribeClient struct {
	grpc.ClientStream
}

func (x *dBMSSubscribeClient) Recv() (*PubsubMessage, error) {
	m := new(PubsubMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBMSClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigAck, error) {
	out := new(GetConfigAck)
	err := c.cc.Invoke(ctx, "/DBMS/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) SwitchDBCluster(ctx context.Context, in *SwitchDBClusterReq, opts ...grpc.CallOption) (*SwitchDBClusterAck, error) {
	out := new(SwitchDBClusterAck)
	err := c.cc.Invoke(ctx, "/DBMS/SwitchDBCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) SyncSentinelConfig(ctx context.Context, in *SyncSentinelConfigReq, opts ...grpc.CallOption) (*SyncSentinelConfigAck, error) {
	out := new(SyncSentinelConfigAck)
	err := c.cc.Invoke(ctx, "/DBMS/SyncSentinelConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBMSClient) HeartBeat(ctx context.Context, in *HeartBeatReq, opts ...grpc.CallOption) (*HeartBeatAck, error) {
	out := new(HeartBeatAck)
	err := c.cc.Invoke(ctx, "/DBMS/HeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBMSServer is the server API for DBMS service.
type DBMSServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(*Topic, DBMS_SubscribeServer) error
	GetConfig(context.Context, *GetConfigReq) (*GetConfigAck, error)
	SwitchDBCluster(context.Context, *SwitchDBClusterReq) (*SwitchDBClusterAck, error)
	SyncSentinelConfig(context.Context, *SyncSentinelConfigReq) (*SyncSentinelConfigAck, error)
	HeartBeat(context.Context, *HeartBeatReq) (*HeartBeatAck, error)
}

// UnimplementedDBMSServer can be embedded to have forward compatible implementations.
type UnimplementedDBMSServer struct {
}

func (*UnimplementedDBMSServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (*UnimplementedDBMSServer) Subscribe(*Topic, DBMS_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedDBMSServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedDBMSServer) SwitchDBCluster(context.Context, *SwitchDBClusterReq) (*SwitchDBClusterAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchDBCluster not implemented")
}
func (*UnimplementedDBMSServer) SyncSentinelConfig(context.Context, *SyncSentinelConfigReq) (*SyncSentinelConfigAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSentinelConfig not implemented")
}
func (*UnimplementedDBMSServer) HeartBeat(context.Context, *HeartBeatReq) (*HeartBeatAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}

func RegisterDBMSServer(s *grpc.Server, srv DBMSServer) {
	s.RegisterService(&_DBMS_serviceDesc, srv)
}

func _DBMS_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBMS/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Topic)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DBMSServer).Subscribe(m, &dBMSSubscribeServer{stream})
}

type DBMS_SubscribeServer interface {
	Send(*PubsubMessage) error
	grpc.ServerStream
}

type dBMSSubscribeServer struct {
	grpc.ServerStream
}

func (x *dBMSSubscribeServer) Send(m *PubsubMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _DBMS_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBMS/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_SwitchDBCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwitchDBClusterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).SwitchDBCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBMS/SwitchDBCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).SwitchDBCluster(ctx, req.(*SwitchDBClusterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_SyncSentinelConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSentinelConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).SyncSentinelConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBMS/SyncSentinelConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).SyncSentinelConfig(ctx, req.(*SyncSentinelConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBMS_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBMSServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DBMS/HeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBMSServer).HeartBeat(ctx, req.(*HeartBeatReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DBMS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DBMS",
	HandlerType: (*DBMSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _DBMS_Publish_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _DBMS_GetConfig_Handler,
		},
		{
			MethodName: "SwitchDBCluster",
			Handler:    _DBMS_SwitchDBCluster_Handler,
		},
		{
			MethodName: "SyncSentinelConfig",
			Handler:    _DBMS_SyncSentinelConfig_Handler,
		},
		{
			MethodName: "HeartBeat",
			Handler:    _DBMS_HeartBeat_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _DBMS_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "publish.proto",
}
